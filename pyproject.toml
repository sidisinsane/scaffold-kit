[build-system]
requires      = [ "hatchling", "hatch-vcs" ]
build-backend = "hatchling.build"

[project]
name = "scaffold-kit"
dynamic = [ "version" ] # Version comes from Git tags
description = "Command-line tools for project setup, structure creation, file tracking, and directory trees."
readme = "README.md"
license = "MIT"
authors = [
  { name = "Dirk Sidney Jansen", email = "sidisinsane@users.noreply.github.com" },
]
requires-python = ">=3.12"
keywords = [
  "scaffold",
  "productivity",
  "generator",
  "project-structure",
  "cli",
  "cli-tool",
  "command-line",
  "command-line-tool",
  "tree",
  "file-tree",
  "directory-tree",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Code Generators",
  "Topic :: System :: Filesystems",
  "Topic :: Utilities",
]

dependencies = [
  "pyyaml~=6.0.2",
]

[project.urls]
Homepage        = "https://github.com/sidisinsane/scaffold-kit"
Documentation   = "https://sidisinsane.github.io/scaffold-kit/"
"API Reference" = "https://sidisinsane.github.io/scaffold-kit/reference/"
Repository      = "https://github.com/sidisinsane/scaffold-kit.git"
"Bug Tracker"   = "https://github.com/sidisinsane/scaffold-kit/issues"

[project.optional-dependencies]
build = [ "python-semantic-release~=10.3.1" ]

dev = [
  "ruff~=0.12.10",
  "mypy~=1.17.0",
  "bandit~=1.8.6",
  "pre-commit~=4.3.0",
  "yamllint~=1.37.1",
  "taplo~=0.9.3",
  "pylint~=3.3.8",
  "pytest~=8.4.1",
  "pytest-cov~=6.2.1",
  "coverage~=7.10.1",
]

docs = [
  "mkdocs~=1.6.1",
  "mkdocstrings[python]~=0.30.0",
  "mkdocs-gen-files~=0.5.0",
  "mkdocs-material~=9.6.16",
  "mkdocs-nav-weight~=0.2.0",
  "mkdocs-section-index~=0.3.10",
  "pymdown-extensions~=10.16.1",
  "sphinx~=8.2.3",
  "sphinx-favicon~=1.0.1",
]

test = [
  "pytest~=8.4.1",
  "pytest-cov~=6.2.1",
  "coverage~=7.10.1",
]

[project.scripts]
scaffold-kit = "scaffold_kit.main:main"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build]
exclude = [ "uv.lock", ".tool-versions", ".github", ".venv" ]

[tool.hatch.build.targets.wheel]
packages = [ "src/scaffold_kit" ]

[tool.hatch.build.hooks.vcs]
version-file = "src/scaffold_kit/__version__.py"
version-scheme = "guess-next-dev"
local-scheme = "no-local-version"
fallback-version = "0.1.0"
template = '''"""Package version information.

Automatic version file generated by hatch-vcs. Do not change, do not track!
"""

from __future__ import annotations


__version__ = {version!r}
__version_tuple__ = {version_tuple!r}

'''

[tool.semantic_release]
build_command = """
  uv lock --upgrade-package "$PACKAGE_NAME"
  uv build
"""
commit_message = "chore(release): {version}"
commit_author = "semantic-release <semantic-release>"
commit_parser = "conventional"
tag_format = "{version}"

[tool.semantic_release.branches.main]
match      = "(main|master)"
prerelease = false

[tool.semantic_release.changelog]
mode = "update"
insertion_flag = "<!-- version list -->"
exclude_commit_patterns = [
  '''chore(?:\([^)]*?\))?: .+''',
  '''ci(?:\([^)]*?\))?: .+''',
  '''refactor(?:\([^)]*?\))?: .+''',
  '''style(?:\([^)]*?\))?: .+''',
  '''test(?:\([^)]*?\))?: .+''',
  '''build\((?!deps\): .+)''',
  '''Initial [Cc]ommit.*''',
  '''First [Cc]ommit.*''',
]

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format  = "md"

[tool.semantic_release.changelog.environment]
block_start_string    = "{%"
block_end_string      = "%}"
variable_start_string = "{{"
variable_end_string   = "}}"
comment_start_string  = "{#"
comment_end_string    = "#}"
trim_blocks           = false
lstrip_blocks         = false
newline_sequence      = "\n"
keep_trailing_newline = false
extensions            = [  ]
autoescape            = false

[tool.semantic_release.commit_parser_options]
minor_tags = [ "feat" ]
patch_tags = [ "fix", "perf" ]
other_allowed_tags = [
  "build",
  "chore",
  "ci",
  "docs",
  "refactor",
  "release",
  "style",
  "test",
]
allowed_tags = [
  "feat",
  "fix",
  "perf",
  "build",
  "chore",
  "ci",
  "docs",
  "refactor",
  "release",
  "style",
  "test",
]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.publish]
dist_glob_patterns    = [ "dist/*" ]
upload_to_vcs_release = true
